name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create_release:  # Changed from create-release to create_release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: LyangLang ${{ github.ref_name }}
          draft: false
          prerelease: false

  build-release:
    needs: create_release  # Updated to match the job name above
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: linux-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-aarch64

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Package Release
        shell: bash
        run: |
          mkdir -p release/lyangpiler
          
          # Copy binaries and scripts
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/lyangpiler.exe release/lyangpiler/
            cp lyangpiler.cmd release/lyangpiler/
          else
            cp target/${{ matrix.target }}/release/lyangpiler release/lyangpiler/
            cp lyangpiler release/lyangpiler/
            chmod +x release/lyangpiler/lyangpiler
          fi
          
          # Copy documentation and examples
          cp README.md release/lyangpiler/
          cp example.nbh release/lyangpiler/ || true
          
          # Create archive
          cd release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a lyangpiler-${{ matrix.name }}.zip lyangpiler/
          else
            tar -czf lyangpiler-${{ matrix.name }}.tar.gz lyangpiler/
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: release/lyangpiler-${{ matrix.name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_name: lyangpiler-${{ matrix.name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_content_type: ${{ matrix.os == 'windows-latest' && 'application/zip' || 'application/gzip' }}

  publish-crate:
    needs: build-release
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://crates.io/crates/lyangpiler
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Publish to crates.io
        uses: actions-rs/cargo@v1
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        with:
          command: publish