name: Build and Release

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: lyangpiler
            asset_name: lyangpiler-linux-amd64
          - os: windows-latest
            artifact_name: lyangpiler.exe
            asset_name: lyangpiler-windows-amd64
          - os: macos-latest
            artifact_name: lyangpiler
            asset_name: lyangpiler-macos-amd64

    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    
    - name: Build
      run: cargo build --release
    
    - name: Run tests
      run: cargo test --release
    
    - name: Package for Unix-like
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p release/lyangpiler
        cp target/release/${{ matrix.artifact_name }} release/lyangpiler/
        cp lyangpiler install.sh release/lyangpiler/
        cp README.md release/lyangpiler/
        cp example.nbh release/lyangpiler/ || true
        chmod +x release/lyangpiler/lyangpiler
        chmod +x release/lyangpiler/install.sh
        cd release
        tar -czf ${{ matrix.asset_name }}.tar.gz lyangpiler/
    
    - name: Package for Windows
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        mkdir -p release/lyangpiler
        cp target/release/${{ matrix.artifact_name }} release/lyangpiler/
        cp lyangpiler.cmd install.cmd release/lyangpiler/
        cp README.md release/lyangpiler/
        cp example.nbh release/lyangpiler/ || true
        cd release
        7z a -tzip ${{ matrix.asset_name }}.zip lyangpiler/
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.asset_name }}
        path: release/${{ matrix.asset_name }}.*

  create_draft_release:
    name: Create Draft Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref_name }}
        draft: true
        prerelease: false

    - name: Upload Linux Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./lyangpiler-linux-amd64/lyangpiler-linux-amd64.tar.gz
        asset_name: lyangpiler-linux-amd64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Windows Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./lyangpiler-windows-amd64/lyangpiler-windows-amd64.zip
        asset_name: lyangpiler-windows-amd64.zip
        asset_content_type: application/zip

    - name: Upload macOS Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./lyangpiler-macos-amd64/lyangpiler-macos-amd64.tar.gz
        asset_name: lyangpiler-macos-amd64.tar.gz
        asset_content_type: application/gzip